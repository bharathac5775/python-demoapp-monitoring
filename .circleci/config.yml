version: 2.1

executors:
  python-executor:
    docker:
      - image: cimg/python:3.9
    working_directory: ~/repo

  docker-executor:
    docker:
      - image: docker:20.10.16
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    working_directory: ~/repo

jobs:
  run-lints:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install Make
          command: |
            sudo apt-get update && sudo apt-get install -y make
      - run:
          name: Run Linting
          command: make lint

  run-tests:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install Make
          command: |
            sudo apt-get update && sudo apt-get install -y make
      - run:
          name: Run Tests
          command: make test

  build-image:
    executor: docker-executor
    environment:
      IMAGE_NAME: bacdocker/pythondemoapp
      IMAGE_TAG: v1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Log in to Docker Registry
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: Build Docker Image
          command: docker build -t $IMAGE_NAME:$IMAGE_TAG .
      - run:
          name: Push Docker Image
          command: docker push $IMAGE_NAME:$IMAGE_TAG

  # deploy-to-ec2:
  #   executor: docker-executor
  #   environment:
  #     IMAGE_NAME: bacdocker/pythondemoapp
  #     IMAGE_TAG: v1
  #   steps:
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "SHA256:tcVMUmDZaQJHuYJMncYIUog42wLkZ5EHjw2ROxtnnDE"  # Correct fingerprint of the SSH key
  #     - run:
  #         name: Debug SSH Setup
  #         command: |
  #           echo "Checking SSH keys..."
  #           echo "User: $(whoami)"
  #           echo "Home Directory: $HOME"
  #           ls -la $HOME/.ssh  # List the contents of the .ssh directory relative to the home
  #           cat $HOME/.ssh/id_rsa || echo "id_rsa not found"  # Show the key (if it exists) or print a message
  #     - run:
  #         name: Set SSH Key Permissions
  #         command: |
  #           if [ -f $HOME/.ssh/id_rsa ]; then
  #             chmod 400 $HOME/.ssh/id_rsa  # Set the correct permissions if the key exists
  #           else
  #             echo "id_rsa not found"  # Print a message if the key doesn't exist
  #           fi
  #     - run:
  #         name: Deploy to EC2
  #         command: |
  #           # Make sure you are using the correct user (ubuntu for Ubuntu instances, ec2-user for Amazon Linux)
  #           printf "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD\n\
  #           docker pull $IMAGE_NAME:$IMAGE_TAG\n\
  #           docker stop my-app || true\n\
  #           docker rm my-app || true\n\
  #           docker run -it -d --name my-app -p 3000:3000 $IMAGE_NAME:$IMAGE_TAG\n" | ssh -T -o StrictHostKeyChecking=no ubuntu@54.234.73.51



  deploy-to-ec2:
    executor: docker-executor
    environment:
      IMAGE_NAME: bacdocker/pythondemoapp
      IMAGE_TAG: v1
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SSHKEY"
      - run:
          name: Deploy to EC2
          command: |
            printf "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD\n\
            docker pull $IMAGE_NAME:$IMAGE_TAG\n\
            docker stop my-app || true\n\
            docker rm my-app || true\n\
            docker run -it -d --name my-app -p 3000:3000 $IMAGE_NAME:$IMAGE_TAG\n" | ssh -o StrictHostKeyChecking=no ubuntu@54.234.73.51



workflows:
  version: 2
  test-and-deploy:
    jobs:
      - run-lints
      - run-tests:
          requires:
            - run-lints
      - build-image:
          requires:
            - run-tests
      - deploy-to-ec2:
          requires:
            - build-image

# workflows:
#   version: 2
#   test-and-deploy:
#     jobs:
#       - deploy-to-ec2:
#           filters:
#             branches:
#               only: circleci-project-setup  # Specify the branch to trigger this job
#           requires: []
#           manual: true  # This makes the job manual

